# PostgreSQL Database Deployment for Cloud Security MCP Server

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: cloud-security
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
data:
  postgresql.conf: |
    # PostgreSQL configuration for Cloud Security MCP Server
    
    # Connection settings
    listen_addresses = '*'
    port = 5432
    max_connections = 200
    
    # Memory settings
    shared_buffers = 256MB
    effective_cache_size = 1GB
    work_mem = 4MB
    maintenance_work_mem = 128MB
    
    # Write-ahead logging
    wal_level = replica
    wal_buffers = 16MB
    checkpoint_completion_target = 0.9
    
    # Query planner
    random_page_cost = 1.1
    effective_io_concurrency = 200
    
    # Logging
    log_destination = 'stderr'
    logging_collector = on
    log_directory = 'pg_log'
    log_filename = 'postgresql-%Y-%m-%d_%H%M%S.log'
    log_statement = 'all'
    log_min_duration_statement = 1000
    
    # Security
    ssl = on
    ssl_cert_file = '/var/lib/postgresql/server.crt'
    ssl_key_file = '/var/lib/postgresql/server.key'
    
  pg_hba.conf: |
    # PostgreSQL Client Authentication Configuration
    local   all             all                                     trust
    host    all             all             127.0.0.1/32            scram-sha-256
    host    all             all             ::1/128                 scram-sha-256
    host    all             all             10.0.0.0/8              scram-sha-256
    host    all             all             172.16.0.0/12           scram-sha-256
    host    all             all             192.168.0.0/16          scram-sha-256

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: cloud-security
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
spec:
  type: ClusterIP
  ports:
  - name: postgres
    port: 5432
    targetPort: postgres
    protocol: TCP
  selector:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres
  namespace: cloud-security
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
    app.kubernetes.io/version: "15"
spec:
  serviceName: postgres
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: postgres
      app.kubernetes.io/component: database
  template:
    metadata:
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
        app.kubernetes.io/version: "15"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: postgres-init
        image: postgres:15-alpine
        command:
        - sh
        - -c
        - |
          chown -R 999:999 /var/lib/postgresql/data
          chmod 700 /var/lib/postgresql/data
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        securityContext:
          runAsUser: 0
      containers:
      - name: postgres
        image: postgres:15-alpine
        ports:
        - name: postgres
          containerPort: 5432
          protocol: TCP
        env:
        - name: POSTGRES_DB
          value: "cloud_security"
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cloud-security-secrets
              key: postgres-password
        - name: POSTGRES_INITDB_ARGS
          value: "--auth-host=scram-sha-256"
        - name: POSTGRES_HOST_AUTH_METHOD
          value: "scram-sha-256"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-config
          mountPath: /etc/postgresql
          readOnly: true
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
          readOnly: true
        resources:
          requests:
            memory: "1Gi"
            cpu: "500m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - cloud_security
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - postgres
            - -d
            - cloud_security
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
      labels:
        app.kubernetes.io/name: postgres
        app.kubernetes.io/component: database
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp3-encrypted  # Use appropriate storage class
      resources:
        requests:
          storage: 100Gi

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  namespace: cloud-security
  labels:
    app.kubernetes.io/name: postgres
    app.kubernetes.io/component: database
data:
  01-init.sql: |
    -- Cloud Security MCP Server Database Initialization
    CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
    CREATE EXTENSION IF NOT EXISTS "pgcrypto";
    CREATE EXTENSION IF NOT EXISTS "hstore";
    
    -- Create custom types
    CREATE TYPE severity_level AS ENUM ('critical', 'high', 'medium', 'low', 'info');
    CREATE TYPE scan_status AS ENUM ('pending', 'running', 'completed', 'failed', 'cancelled');
    CREATE TYPE cloud_provider AS ENUM ('aws', 'azure', 'gcp', 'kubernetes', 'multi');
    CREATE TYPE compliance_status AS ENUM ('compliant', 'non_compliant', 'partially_compliant', 'not_applicable');

---
# Redis Deployment

apiVersion: v1
kind: ConfigMap
metadata:
  name: redis-config
  namespace: cloud-security
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
data:
  redis.conf: |
    # Redis configuration for Cloud Security MCP Server
    
    # Network
    bind 0.0.0.0
    port 6379
    timeout 0
    tcp-keepalive 300
    
    # General
    daemonize no
    supervised no
    pidfile /var/run/redis_6379.pid
    loglevel notice
    logfile ""
    databases 16
    
    # Persistence
    save 900 1
    save 300 10
    save 60 10000
    stop-writes-on-bgsave-error yes
    rdbcompression yes
    rdbchecksum yes
    dbfilename dump.rdb
    dir /data
    
    # Append only file
    appendonly yes
    appendfilename "appendonly.aof"
    appendfsync everysec
    no-appendfsync-on-rewrite no
    auto-aof-rewrite-percentage 100
    auto-aof-rewrite-min-size 64mb
    
    # Memory management
    maxmemory 1gb
    maxmemory-policy allkeys-lru
    
    # Security
    requirepass REPLACE_WITH_ACTUAL_PASSWORD
    
    # Clients
    maxclients 10000

---
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: cloud-security
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
spec:
  type: ClusterIP
  ports:
  - name: redis
    port: 6379
    targetPort: redis
    protocol: TCP
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
  namespace: cloud-security
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/component: cache
    app.kubernetes.io/version: "7"
spec:
  serviceName: redis
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/component: cache
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
        app.kubernetes.io/version: "7"
    spec:
      securityContext:
        runAsUser: 999
        runAsGroup: 999
        fsGroup: 999
      initContainers:
      - name: redis-init
        image: redis:7-alpine
        command:
        - sh
        - -c
        - |
          chown -R 999:999 /data
          chmod 755 /data
          # Replace password in config
          sed "s/REPLACE_WITH_ACTUAL_PASSWORD/$REDIS_PASSWORD/g" /tmp/redis.conf > /data/redis.conf
        env:
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: cloud-security-secrets
              key: redis-password
        volumeMounts:
        - name: redis-data
          mountPath: /data
        - name: redis-config
          mountPath: /tmp
        securityContext:
          runAsUser: 0
      containers:
      - name: redis
        image: redis:7-alpine
        command:
        - redis-server
        - /data/redis.conf
        ports:
        - name: redis
          containerPort: 6379
          protocol: TCP
        volumeMounts:
        - name: redis-data
          mountPath: /data
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          exec:
            command:
            - redis-cli
            - --raw
            - incr
            - ping
          initialDelaySeconds: 30
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
            - redis-cli
            - --raw
            - incr
            - ping
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: true
          runAsUser: 999
          capabilities:
            drop:
            - ALL
      volumes:
      - name: redis-config
        configMap:
          name: redis-config
  volumeClaimTemplates:
  - metadata:
      name: redis-data
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/component: cache
    spec:
      accessModes: ["ReadWriteOnce"]
      storageClassName: gp3-encrypted  # Use appropriate storage class
      resources:
        requests:
          storage: 20Gi

---
# Backup CronJob for PostgreSQL
apiVersion: batch/v1
kind: CronJob
metadata:
  name: postgres-backup
  namespace: cloud-security
  labels:
    app.kubernetes.io/name: postgres-backup
    app.kubernetes.io/component: backup
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  concurrencyPolicy: Forbid
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 3
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            app.kubernetes.io/name: postgres-backup
            app.kubernetes.io/component: backup
        spec:
          restartPolicy: OnFailure
          containers:
          - name: postgres-backup
            image: postgres:15-alpine
            command:
            - sh
            - -c
            - |
              TIMESTAMP=$(date +%Y%m%d_%H%M%S)
              BACKUP_FILE="cloud_security_backup_$TIMESTAMP.sql"
              
              echo "Starting backup at $(date)"
              pg_dump -h postgres -U postgres -d cloud_security > /backups/$BACKUP_FILE
              
              if [ $? -eq 0 ]; then
                echo "Backup completed successfully: $BACKUP_FILE"
                gzip /backups/$BACKUP_FILE
                
                # Clean up old backups (keep last 30 days)
                find /backups -name "*.sql.gz" -mtime +30 -delete
              else
                echo "Backup failed"
                exit 1
              fi
            env:
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: cloud-security-secrets
                  key: postgres-password
            volumeMounts:
            - name: backup-storage
              mountPath: /backups
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "1Gi"
                cpu: "500m"
          volumes:
          - name: backup-storage
            persistentVolumeClaim:
              claimName: postgres-backup-storage

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-backup-storage
  namespace: cloud-security
  labels:
    app.kubernetes.io/name: postgres-backup
    app.kubernetes.io/component: backup
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 50Gi
  storageClassName: gp3-encrypted  # Use appropriate storage class
