version: '3.8'

services:
  cloud-security-mcp:
    build: .
    container_name: cloud-security-mcp
    restart: unless-stopped
    environment:
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/cloud_security
    volumes:
      # Mount Docker socket for security tool integrations
      - /var/run/docker.sock:/var/run/docker.sock
      # Mount cloud provider credentials
      - ~/.aws:/home/clouduser/.aws:ro
      - ~/.azure:/home/clouduser/.azure:ro
      - ~/.config/gcloud:/home/clouduser/.config/gcloud:ro
      - ~/.kube:/home/clouduser/.kube:ro
      # Mount scan results and logs
      - ./scan_results:/app/scan_results
      - ./logs:/app/logs
      - ./config:/app/config
    ports:
      - "8080:8080"
    depends_on:
      - redis
      - postgres
    networks:
      - cloud-security-network

  redis:
    image: redis:7-alpine
    container_name: cloud-security-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass cloudpass
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - cloud-security-network

  postgres:
    image: postgres:15-alpine
    container_name: cloud-security-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=cloud_security
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
    ports:
      - "5432:5432"
    networks:
      - cloud-security-network

  # Optional: Prometheus for metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: cloud-security-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - cloud-security-network

  # Optional: Grafana for dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: cloud-security-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - cloud-security-network

  # Security tool containers (pulled when needed)
  prowler:
    image: toniblyx/prowler:latest
    container_name: cloud-security-prowler
    profiles: ["tools"]
    volumes:
      - ~/.aws:/root/.aws:ro
      - ./scan_results:/output
    networks:
      - cloud-security-network

  checkov:
    image: bridgecrew/checkov:latest
    container_name: cloud-security-checkov
    profiles: ["tools"]
    volumes:
      - ./scan_results:/output
    networks:
      - cloud-security-network

  trivy:
    image: aquasec/trivy:latest
    container_name: cloud-security-trivy
    profiles: ["tools"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./scan_results:/output
    networks:
      - cloud-security-network

  kube-hunter:
    image: aquasec/kube-hunter:latest
    container_name: cloud-security-kube-hunter
    profiles: ["tools"]
    volumes:
      - ./scan_results:/output
    networks:
      - cloud-security-network

volumes:
  redis_data:
  postgres_data:
  prometheus_data:
  grafana_data:

networks:
  cloud-security-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
