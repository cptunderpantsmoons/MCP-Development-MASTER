# Development Docker Compose Configuration
# This configuration is optimized for development with hot reloading,
# debug capabilities, and easier access for development tools

version: '3.8'

services:
  # Main Cloud Security MCP Server (Development Mode)
  cloud-security-mcp:
    build:
      context: .
      dockerfile: Dockerfile.dev
      args:
        - DEV_MODE=true
    container_name: cloud-security-mcp-dev
    restart: unless-stopped
    
    # Environment variables
    environment:
      - NODE_ENV=development
      - LOG_LEVEL=DEBUG
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:devpassword@postgres:5432/cloud_security_dev
      - PROMETHEUS_ENABLED=true
      - HEALTH_CHECK_ENABLED=true
      - DEBUG=true
      - AUTO_RELOAD=true
      - MOCK_CLOUD_APIS=false
    
    # Volume mounts for development
    volumes:
      # Source code for hot reloading
      - ./cloud_security_mcp_server:/app/cloud_security_mcp_server
      - ./tests:/app/tests
      - ./examples:/app/examples
      
      # Configuration
      - ./examples/config_example.yaml:/app/config/config.yaml
      - ./examples/.env.development:/app/.env
      
      # Development credentials (use test/mock credentials)
      - ./examples/credentials:/app/config/credentials
      
      # Data persistence
      - ./dev_data/scan_results:/app/scan_results
      - ./dev_data/logs:/app/logs
      
      # Docker socket for security tools
      - /var/run/docker.sock:/var/run/docker.sock
    
    # Port exposure (more ports for development)
    ports:
      - "8080:8080"   # Main application port
      - "9090:9090"   # Metrics port
      - "5678:5678"   # Python debugger port
    
    # Working directory
    working_dir: /app
    
    # Command override for development
    command: >
      sh -c "
        pip install -e '.[dev]' &&
        python -m debugpy --listen 0.0.0.0:5678 --wait-for-client -m cloud_security_mcp_server.main
      "
    
    # Dependencies
    depends_on:
      - redis
      - postgres
    
    # Networks
    networks:
      - cloud-security-dev-network

  # Redis for development
  redis:
    image: redis:7-alpine
    container_name: cloud-security-redis-dev
    restart: unless-stopped
    
    # Simple configuration for development
    command: redis-server --appendonly yes --requirepass devpassword
    
    # Volumes
    volumes:
      - redis_dev_data:/data
    
    # Ports exposed for external access
    ports:
      - "6379:6379"
    
    # Networks
    networks:
      - cloud-security-dev-network

  # PostgreSQL for development
  postgres:
    image: postgres:15-alpine
    container_name: cloud-security-postgres-dev
    restart: unless-stopped
    
    # Environment variables
    environment:
      - POSTGRES_DB=cloud_security_dev
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=devpassword
    
    # Volumes
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init_db.sql
      - ./scripts/dev_data.sql:/docker-entrypoint-initdb.d/dev_data.sql
    
    # Ports exposed for external access
    ports:
      - "5432:5432"
    
    # Networks
    networks:
      - cloud-security-dev-network

  # Prometheus for development
  prometheus:
    image: prom/prometheus:latest
    container_name: cloud-security-prometheus-dev
    restart: unless-stopped
    
    # Command
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-admin-api'
      - '--log.level=debug'
    
    # Volumes
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./monitoring/alerts:/etc/prometheus/alerts
      - prometheus_dev_data:/prometheus
    
    # Ports
    ports:
      - "9090:9090"
    
    # Networks
    networks:
      - cloud-security-dev-network

  # Grafana for development
  grafana:
    image: grafana/grafana:latest
    container_name: cloud-security-grafana-dev
    restart: unless-stopped
    
    # Environment
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
      - GF_LOG_LEVEL=debug
    
    # Volumes
    volumes:
      - grafana_dev_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
    
    # Ports
    ports:
      - "3000:3000"
    
    # Dependencies
    depends_on:
      - prometheus
    
    # Networks
    networks:
      - cloud-security-dev-network

  # Security tool containers for development
  # These are started on demand but available for testing
  
  prowler-dev:
    image: toniblyx/prowler:latest
    container_name: prowler-dev
    profiles: ["tools"]
    volumes:
      - ./examples/aws-credentials:/root/.aws:ro
      - ./dev_data/scan_results:/output
    networks:
      - cloud-security-dev-network

  checkov-dev:
    image: bridgecrew/checkov:latest
    container_name: checkov-dev
    profiles: ["tools"]
    volumes:
      - ./examples/terraform:/tf:ro
      - ./dev_data/scan_results:/output
    networks:
      - cloud-security-dev-network

  trivy-dev:
    image: aquasec/trivy:latest
    container_name: trivy-dev
    profiles: ["tools"]
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./dev_data/scan_results:/output
    networks:
      - cloud-security-dev-network

  # Development utilities
  
  # PgAdmin for database management
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: cloud-security-pgadmin-dev
    restart: unless-stopped
    
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin
      - PGADMIN_CONFIG_SERVER_MODE=False
    
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    
    ports:
      - "5050:80"
    
    depends_on:
      - postgres
    
    networks:
      - cloud-security-dev-network

  # Redis Commander for Redis management
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: cloud-security-redis-commander-dev
    restart: unless-stopped
    
    environment:
      - REDIS_HOSTS=local:redis:6379:0:devpassword
    
    ports:
      - "8081:8081"
    
    depends_on:
      - redis
    
    networks:
      - cloud-security-dev-network

  # Mailhog for email testing
  mailhog:
    image: mailhog/mailhog:latest
    container_name: cloud-security-mailhog-dev
    restart: unless-stopped
    
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    
    networks:
      - cloud-security-dev-network

  # Jaeger for distributed tracing (optional)
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: cloud-security-jaeger-dev
    restart: unless-stopped
    
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    
    networks:
      - cloud-security-dev-network

# Named volumes for development data
volumes:
  postgres_dev_data:
  redis_dev_data:
  prometheus_dev_data:
  grafana_dev_data:
  pgadmin_dev_data:

# Development network
networks:
  cloud-security-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16
