# Multi-stage build for DSN Sentinel Node
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

# Create non-root user for build
RUN adduser -D -s /bin/sh appuser

# Set working directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o sentinel \
    ./cmd/sentinel

# Final stage - minimal runtime image
FROM scratch

# Copy CA certificates from builder
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy user account information
COPY --from=builder /etc/passwd /etc/passwd

# Copy the binary
COPY --from=builder /app/sentinel /sentinel

# Copy default configuration
COPY --from=builder /app/configs/sentinel.yaml /etc/dsn/sentinel.yaml

# Create necessary directories
USER appuser

# Expose ports
EXPOSE 8080 9090 8081

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD ["/sentinel", "healthcheck"]

# Set environment variables
ENV DSN_CONFIG_FILE=/etc/dsn/sentinel.yaml
ENV DSN_LOG_LEVEL=info
ENV DSN_LOG_FORMAT=json

# Run the application
ENTRYPOINT ["/sentinel"]
CMD ["--config", "/etc/dsn/sentinel.yaml"]

# Metadata
LABEL maintainer="DSN Team <team@dsn.example.com>"
LABEL version="1.0.0"
LABEL description="DSN Sentinel Node - Security monitoring and threat detection"
LABEL org.opencontainers.image.title="DSN Sentinel"
LABEL org.opencontainers.image.description="Decentralized Sentinel Network - Sentinel Node"
LABEL org.opencontainers.image.vendor="DSN Project"
LABEL org.opencontainers.image.licenses="MIT"
LABEL org.opencontainers.image.source="https://github.com/dsn/decentralized-sentinel-network"